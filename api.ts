/* tslint:disable */
/* eslint-disable */
/**
 * Marketplace API
 * API для торгової платформи з продуктами та категоріями
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: student@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * Унікальний ідентифікатор категорії
     * @type {number}
     * @memberof Category
     */
    'id': number;
    /**
     * Назва категорії
     * @type {string}
     * @memberof Category
     */
    'name': string;
    /**
     * Опис категорії
     * @type {string}
     * @memberof Category
     */
    'description'?: string;
    /**
     * Дата створення
     * @type {string}
     * @memberof Category
     */
    'createdAt'?: string;
    /**
     * Дата останнього оновлення
     * @type {string}
     * @memberof Category
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface CategoryInput
 */
export interface CategoryInput {
    /**
     * Назва категорії
     * @type {string}
     * @memberof CategoryInput
     */
    'name': string;
    /**
     * Опис категорії
     * @type {string}
     * @memberof CategoryInput
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * Унікальний ідентифікатор продукту
     * @type {number}
     * @memberof Product
     */
    'id': number;
    /**
     * Назва продукту
     * @type {string}
     * @memberof Product
     */
    'name': string;
    /**
     * Опис продукту
     * @type {string}
     * @memberof Product
     */
    'description'?: string;
    /**
     * Ціна продукту
     * @type {number}
     * @memberof Product
     */
    'price': number;
    /**
     * ID категорії, до якої належить продукт
     * @type {number}
     * @memberof Product
     */
    'categoryId': number;
    /**
     * 
     * @type {Category}
     * @memberof Product
     */
    'category'?: Category;
    /**
     * Чи є продукт в наявності
     * @type {boolean}
     * @memberof Product
     */
    'inStock'?: boolean;
    /**
     * Дата створення
     * @type {string}
     * @memberof Product
     */
    'createdAt'?: string;
    /**
     * Дата останнього оновлення
     * @type {string}
     * @memberof Product
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ProductInput
 */
export interface ProductInput {
    /**
     * Назва продукту
     * @type {string}
     * @memberof ProductInput
     */
    'name': string;
    /**
     * Опис продукту
     * @type {string}
     * @memberof ProductInput
     */
    'description'?: string;
    /**
     * Ціна продукту
     * @type {number}
     * @memberof ProductInput
     */
    'price': number;
    /**
     * ID категорії, до якої належить продукт
     * @type {number}
     * @memberof ProductInput
     */
    'categoryId': number;
    /**
     * Чи є продукт в наявності
     * @type {boolean}
     * @memberof ProductInput
     */
    'inStock'?: boolean;
}

/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Видалити категорію
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesCategoryIdDelete: async (categoryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('categoriesCategoryIdDelete', 'categoryId', categoryId)
            const localVarPath = `/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Отримати категорію за ID
         * @param {number} categoryId ID категорії
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesCategoryIdGet: async (categoryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('categoriesCategoryIdGet', 'categoryId', categoryId)
            const localVarPath = `/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Оновити категорію
         * @param {number} categoryId 
         * @param {CategoryInput} categoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesCategoryIdPut: async (categoryId: number, categoryInput: CategoryInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('categoriesCategoryIdPut', 'categoryId', categoryId)
            // verify required parameter 'categoryInput' is not null or undefined
            assertParamExists('categoriesCategoryIdPut', 'categoryInput', categoryInput)
            const localVarPath = `/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Отримати список категорій
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Створити нову категорію
         * @param {CategoryInput} categoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesPost: async (categoryInput: CategoryInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryInput' is not null or undefined
            assertParamExists('categoriesPost', 'categoryInput', categoryInput)
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Видалити категорію
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesCategoryIdDelete(categoryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesCategoryIdDelete(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.categoriesCategoryIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Отримати категорію за ID
         * @param {number} categoryId ID категорії
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesCategoryIdGet(categoryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesCategoryIdGet(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.categoriesCategoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Оновити категорію
         * @param {number} categoryId 
         * @param {CategoryInput} categoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesCategoryIdPut(categoryId: number, categoryInput: CategoryInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesCategoryIdPut(categoryId, categoryInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.categoriesCategoryIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Отримати список категорій
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.categoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Створити нову категорію
         * @param {CategoryInput} categoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesPost(categoryInput: CategoryInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesPost(categoryInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.categoriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Видалити категорію
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesCategoryIdDelete(categoryId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.categoriesCategoryIdDelete(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Отримати категорію за ID
         * @param {number} categoryId ID категорії
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesCategoryIdGet(categoryId: number, options?: RawAxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.categoriesCategoryIdGet(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Оновити категорію
         * @param {number} categoryId 
         * @param {CategoryInput} categoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesCategoryIdPut(categoryId: number, categoryInput: CategoryInput, options?: RawAxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.categoriesCategoryIdPut(categoryId, categoryInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Отримати список категорій
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Category>> {
            return localVarFp.categoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Створити нову категорію
         * @param {CategoryInput} categoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesPost(categoryInput: CategoryInput, options?: RawAxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.categoriesPost(categoryInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * 
     * @summary Видалити категорію
     * @param {number} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public categoriesCategoryIdDelete(categoryId: number, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).categoriesCategoryIdDelete(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Отримати категорію за ID
     * @param {number} categoryId ID категорії
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public categoriesCategoryIdGet(categoryId: number, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).categoriesCategoryIdGet(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Оновити категорію
     * @param {number} categoryId 
     * @param {CategoryInput} categoryInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public categoriesCategoryIdPut(categoryId: number, categoryInput: CategoryInput, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).categoriesCategoryIdPut(categoryId, categoryInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Отримати список категорій
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public categoriesGet(options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).categoriesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Створити нову категорію
     * @param {CategoryInput} categoryInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public categoriesPost(categoryInput: CategoryInput, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).categoriesPost(categoryInput, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Отримати список продуктів
         * @param {number} [categoryId] Фільтр за ID категорії
         * @param {number} [minPrice] Мінімальна ціна
         * @param {number} [maxPrice] Максимальна ціна
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsGet: async (categoryId?: number, minPrice?: number, maxPrice?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['minPrice'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['maxPrice'] = maxPrice;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Створити новий продукт
         * @param {ProductInput} productInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsPost: async (productInput: ProductInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productInput' is not null or undefined
            assertParamExists('productsPost', 'productInput', productInput)
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Видалити продукт
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdDelete: async (productId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('productsProductIdDelete', 'productId', productId)
            const localVarPath = `/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Отримати продукт за ID
         * @param {number} productId ID продукту
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdGet: async (productId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('productsProductIdGet', 'productId', productId)
            const localVarPath = `/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Оновити продукт
         * @param {number} productId 
         * @param {ProductInput} productInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdPut: async (productId: number, productInput: ProductInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('productsProductIdPut', 'productId', productId)
            // verify required parameter 'productInput' is not null or undefined
            assertParamExists('productsProductIdPut', 'productInput', productInput)
            const localVarPath = `/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Отримати список продуктів
         * @param {number} [categoryId] Фільтр за ID категорії
         * @param {number} [minPrice] Мінімальна ціна
         * @param {number} [maxPrice] Максимальна ціна
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsGet(categoryId?: number, minPrice?: number, maxPrice?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsGet(categoryId, minPrice, maxPrice, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Створити новий продукт
         * @param {ProductInput} productInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsPost(productInput: ProductInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsPost(productInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Видалити продукт
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsProductIdDelete(productId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsProductIdDelete(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsProductIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Отримати продукт за ID
         * @param {number} productId ID продукту
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsProductIdGet(productId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsProductIdGet(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsProductIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Оновити продукт
         * @param {number} productId 
         * @param {ProductInput} productInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsProductIdPut(productId: number, productInput: ProductInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsProductIdPut(productId, productInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.productsProductIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * 
         * @summary Отримати список продуктів
         * @param {number} [categoryId] Фільтр за ID категорії
         * @param {number} [minPrice] Мінімальна ціна
         * @param {number} [maxPrice] Максимальна ціна
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsGet(categoryId?: number, minPrice?: number, maxPrice?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Product>> {
            return localVarFp.productsGet(categoryId, minPrice, maxPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Створити новий продукт
         * @param {ProductInput} productInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsPost(productInput: ProductInput, options?: RawAxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.productsPost(productInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Видалити продукт
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdDelete(productId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.productsProductIdDelete(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Отримати продукт за ID
         * @param {number} productId ID продукту
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdGet(productId: number, options?: RawAxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.productsProductIdGet(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Оновити продукт
         * @param {number} productId 
         * @param {ProductInput} productInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdPut(productId: number, productInput: ProductInput, options?: RawAxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.productsProductIdPut(productId, productInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * 
     * @summary Отримати список продуктів
     * @param {number} [categoryId] Фільтр за ID категорії
     * @param {number} [minPrice] Мінімальна ціна
     * @param {number} [maxPrice] Максимальна ціна
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsGet(categoryId?: number, minPrice?: number, maxPrice?: number, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsGet(categoryId, minPrice, maxPrice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Створити новий продукт
     * @param {ProductInput} productInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsPost(productInput: ProductInput, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsPost(productInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Видалити продукт
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsProductIdDelete(productId: number, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsProductIdDelete(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Отримати продукт за ID
     * @param {number} productId ID продукту
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsProductIdGet(productId: number, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsProductIdGet(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Оновити продукт
     * @param {number} productId 
     * @param {ProductInput} productInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productsProductIdPut(productId: number, productInput: ProductInput, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productsProductIdPut(productId, productInput, options).then((request) => request(this.axios, this.basePath));
    }
}



